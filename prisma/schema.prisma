generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  name              String
  email             String?   @unique
  phone             String?
  location          String?
  password          String?
  provider          String?   @default("local") // local, google, facebook
  providerId        String?
  role              UserRole  @default(CUSTOMER)
  refreshToken      String?
  verificationToken String?
  codeExpiresAt     DateTime?
  campusId          Int?
  // create a column for users location
  // image      String? // not really needed for now since we're not going to be allowing users to upload photos( we need to minimize costs)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  campus      Campus?      @relation(fields: [campusId], references: [id])
  restaurants Restaurant[]
  orders      Order[]
  reviews     Review[]
  rider       Rider?
  cart        Cart?
}

enum UserRole {
  CUSTOMER
  VENDOR
  DRIVER
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  @@map("admins")
}

model Campus {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  createdAt   DateTime @default(now())
  description String
  // later on we can add a fields for the more details like location, description, Admins,... etc

  users       User[]
  restaurants Restaurant[]

  @@map("campuses")
}

model Restaurant {
  id        String   @id @default(uuid())
  name      String
  phone     String   @unique
  ownerId   String
  campusId  Int
  location  String
  ratings   Decimal  @default(0.0) @db.Decimal(3, 2)
  startTime String // the time should be converted to string before storing
  endTime   String
  available Boolean  @default(true)
  verified  Boolean  @default(false)
  category  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User     @relation(fields: [ownerId], references: [id])
  campus  Campus   @relation(fields: [campusId], references: [id])
  menus   Menu[]
  orders  Order[]
  reviews Review[]

  @@map("restaurants")
}

model Menu {
  id           String   @id @default(uuid())
  name         String
  description  String?
  price        Decimal  @db.Decimal(6, 2)
  restaurantId String
  available    Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  addOns       Json? // New field for available add-ons with prices
  category     String?

  restaurant Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems OrderItem[]
  cartItem   CartItem[]

  @@map("menus")
}

model Cart {
  id        String   @id @default(uuid())
  userId    String   @unique // each user can have only one cart at a time
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id          String   @id @default(uuid())
  cartId      String
  menuId      String
  quantity    Int      @default(1)
  unitPrice   Decimal  @db.Decimal(10, 2) // total of all included options per unit
  totalPrice  Decimal  @db.Decimal(10, 2) // quantity * unitPrice
  description String // JSON-like breakdown e.g. {"rice": 15, "egg": 4, "salad": 5}
  notes       String? // User custom notes like "No pepper, please"
  createdAt   DateTime @default(now())

  cart Cart @relation(fields: [cartId], references: [id])
  menu Menu @relation(fields: [menuId], references: [id])
}

model Order {
  id           String      @id @default(uuid())
  userId       String
  restaurantId String
  totalPrice   Decimal     @db.Decimal(10, 2)
  status       OrderStatus @default(PENDING)
  createdAt    DateTime    @default(now())

  user       User        @relation(fields: [userId], references: [id])
  restaurant Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems OrderItem[]
  payment    Payment?
  delivery   Delivery?

  @@map("orders")
}

enum OrderStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  DELIVERED
  CANCELLED
}

model OrderItem {
  id          String  @id @default(uuid())
  orderId     String
  menuId      String
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  description String // JSON-like string
  notes       String?

  order Order @relation(fields: [orderId], references: [id])
  menu  Menu  @relation(fields: [menuId], references: [id])

  @@map("orderItems")
}

model Review {
  id           String   @id @default(uuid())
  userId       String
  restaurantId String
  rating       Float
  comment      String
  createdAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  @@map("reviews")
}

model Rider {
  id        Int      @id @default(autoincrement()) //consider using auto increment for rider tables so that we can easily keep track of riders
  userId    String   @unique
  available Boolean  @default(true)
  createdAt DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id])
  deliveries Delivery[]

  @@map("riders")
}

model Delivery {
  id        String         @id @default(uuid())
  orderId   String         @unique
  riderId   Int
  status    DeliveryStatus @default(ASSIGNED)
  createdAt DateTime       @default(now())

  order Order @relation(fields: [orderId], references: [id])
  rider Rider @relation(fields: [riderId], references: [id])

  @@map("deliveries")
}

enum DeliveryStatus {
  ASSIGNED
  PICKED_UP
  DELIVERED
  CANCELLED
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  createdAt     DateTime      @default(now())

  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

enum PaymentMethod {
  MOBILE_MONEY
  CARD
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
